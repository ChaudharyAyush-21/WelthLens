generator client {
  provider = "prisma-client-js"
  output   = "./node_modules/@prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String        @id @default(uuid())
  clerkUserId  String        @unique
  email        String        @unique
  name         String?
  imageUrl     String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  accounts     Account[]
  budgets      Budget?
  transactions Transaction[]
  debts        Debt[]
  debtPayments DebtPayment[] 
  debtReceipts DebtReceipt[]

  @@map("users")
}

model Account {
  id           String        @id @default(uuid())
  name         String
  type         AccountType
  balance      Decimal       @default(0)
  isDefault    Boolean       @default(false)
  userId       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@index([userId])
  @@map("accounts")
}

model Transaction {
  id                String             @id @default(uuid())
  type              TransactionType
  amount            Decimal
  description       String?
  date              DateTime
  category          String
  receiptUrl        String?
  isRecurring       Boolean            @default(false)
  recurringInterval RecurringInterval?
  nextRecurringDate DateTime?
  lastProcessed     DateTime?
  status            TransactionStatus  @default(COMPLETED)
  userId            String
  accountId         String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  account           Account            @relation(fields: [accountId], references: [id], onDelete: Cascade)
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([accountId])
  @@map("transactions")
}

model Budget {
  id            String    @id @default(uuid())
  amount        Decimal
  lastAlertSent DateTime?
  userId        String    @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("budgets")
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum AccountType {
  CURRENT
  SAVINGS
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum RecurringInterval {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

model Debt {
  id              String          @id @default(uuid())
  name            String
  type            DebtType
  totalAmount     Decimal
  currentBalance  Decimal
  interestRate    Decimal?
  minPayment      Decimal?
  dueDate         DateTime?
  description     String?
  status          DebtStatus      @default(ACTIVE)
  userId          String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments        DebtPayment[]
  receipts        DebtReceipt[]

  @@index([userId])
  @@index([status])
  @@map("debts")
}

model DebtPayment {
  id          String      @id @default(uuid())
  amount      Decimal
  paymentDate DateTime
  description String?
  debtId      String
  userId      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  debt        Debt        @relation(fields: [debtId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([debtId])
  @@index([userId])
  @@map("debt_payments")
}

model DebtReceipt {
  id          String   @id @default(uuid())
  fileName    String
  fileUrl     String
  fileSize    Int
  uploadDate  DateTime @default(now())
  description String?
  debtId      String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  debt        Debt     @relation(fields: [debtId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([debtId])
  @@index([userId])
  @@map("debt_receipts")
}

enum DebtType {
  CREDIT_CARD
  PERSONAL_LOAN
  HOME_LOAN
  CAR_LOAN
  EDUCATION_LOAN
  EMI
  OTHER
}

enum DebtStatus {
  ACTIVE
  PAID_OFF
  OVERDUE
  PAUSED
}
